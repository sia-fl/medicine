// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdServicesClient is the client API for IdServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdServicesClient interface {
	GetId(ctx context.Context, in *GetIdReq, opts ...grpc.CallOption) (*GetIdRes, error)
	GetIdArr(ctx context.Context, in *GetIdArrReq, opts ...grpc.CallOption) (*GetIdArrRes, error)
}

type idServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewIdServicesClient(cc grpc.ClientConnInterface) IdServicesClient {
	return &idServicesClient{cc}
}

func (c *idServicesClient) GetId(ctx context.Context, in *GetIdReq, opts ...grpc.CallOption) (*GetIdRes, error) {
	out := new(GetIdRes)
	err := c.cc.Invoke(ctx, "/IdServices/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idServicesClient) GetIdArr(ctx context.Context, in *GetIdArrReq, opts ...grpc.CallOption) (*GetIdArrRes, error) {
	out := new(GetIdArrRes)
	err := c.cc.Invoke(ctx, "/IdServices/GetIdArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdServicesServer is the server API for IdServices service.
// All implementations must embed UnimplementedIdServicesServer
// for forward compatibility
type IdServicesServer interface {
	GetId(context.Context, *GetIdReq) (*GetIdRes, error)
	GetIdArr(context.Context, *GetIdArrReq) (*GetIdArrRes, error)
	mustEmbedUnimplementedIdServicesServer()
}

// UnimplementedIdServicesServer must be embedded to have forward compatible implementations.
type UnimplementedIdServicesServer struct {
}

func (UnimplementedIdServicesServer) GetId(context.Context, *GetIdReq) (*GetIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedIdServicesServer) GetIdArr(context.Context, *GetIdArrReq) (*GetIdArrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdArr not implemented")
}
func (UnimplementedIdServicesServer) mustEmbedUnimplementedIdServicesServer() {}

// UnsafeIdServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdServicesServer will
// result in compilation errors.
type UnsafeIdServicesServer interface {
	mustEmbedUnimplementedIdServicesServer()
}

func RegisterIdServicesServer(s grpc.ServiceRegistrar, srv IdServicesServer) {
	s.RegisterService(&IdServices_ServiceDesc, srv)
}

func _IdServices_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServicesServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IdServices/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServicesServer).GetId(ctx, req.(*GetIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdServices_GetIdArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdArrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServicesServer).GetIdArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IdServices/GetIdArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServicesServer).GetIdArr(ctx, req.(*GetIdArrReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdServices_ServiceDesc is the grpc.ServiceDesc for IdServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IdServices",
	HandlerType: (*IdServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _IdServices_GetId_Handler,
		},
		{
			MethodName: "GetIdArr",
			Handler:    _IdServices_GetIdArr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dist/proto/ids.proto",
}

// IdInMapServicesClient is the client API for IdInMapServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdInMapServicesClient interface {
	GetIdInMap(ctx context.Context, in *GetIdInMapReq, opts ...grpc.CallOption) (*GetIdInMapRes, error)
	GetIdArrInMap(ctx context.Context, in *GetIdArrInMapReq, opts ...grpc.CallOption) (*GetIdArrInMapRes, error)
}

type idInMapServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewIdInMapServicesClient(cc grpc.ClientConnInterface) IdInMapServicesClient {
	return &idInMapServicesClient{cc}
}

func (c *idInMapServicesClient) GetIdInMap(ctx context.Context, in *GetIdInMapReq, opts ...grpc.CallOption) (*GetIdInMapRes, error) {
	out := new(GetIdInMapRes)
	err := c.cc.Invoke(ctx, "/IdInMapServices/GetIdInMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idInMapServicesClient) GetIdArrInMap(ctx context.Context, in *GetIdArrInMapReq, opts ...grpc.CallOption) (*GetIdArrInMapRes, error) {
	out := new(GetIdArrInMapRes)
	err := c.cc.Invoke(ctx, "/IdInMapServices/GetIdArrInMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdInMapServicesServer is the server API for IdInMapServices service.
// All implementations must embed UnimplementedIdInMapServicesServer
// for forward compatibility
type IdInMapServicesServer interface {
	GetIdInMap(context.Context, *GetIdInMapReq) (*GetIdInMapRes, error)
	GetIdArrInMap(context.Context, *GetIdArrInMapReq) (*GetIdArrInMapRes, error)
	mustEmbedUnimplementedIdInMapServicesServer()
}

// UnimplementedIdInMapServicesServer must be embedded to have forward compatible implementations.
type UnimplementedIdInMapServicesServer struct {
}

func (UnimplementedIdInMapServicesServer) GetIdInMap(context.Context, *GetIdInMapReq) (*GetIdInMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdInMap not implemented")
}
func (UnimplementedIdInMapServicesServer) GetIdArrInMap(context.Context, *GetIdArrInMapReq) (*GetIdArrInMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdArrInMap not implemented")
}
func (UnimplementedIdInMapServicesServer) mustEmbedUnimplementedIdInMapServicesServer() {}

// UnsafeIdInMapServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdInMapServicesServer will
// result in compilation errors.
type UnsafeIdInMapServicesServer interface {
	mustEmbedUnimplementedIdInMapServicesServer()
}

func RegisterIdInMapServicesServer(s grpc.ServiceRegistrar, srv IdInMapServicesServer) {
	s.RegisterService(&IdInMapServices_ServiceDesc, srv)
}

func _IdInMapServices_GetIdInMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdInMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdInMapServicesServer).GetIdInMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IdInMapServices/GetIdInMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdInMapServicesServer).GetIdInMap(ctx, req.(*GetIdInMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdInMapServices_GetIdArrInMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdArrInMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdInMapServicesServer).GetIdArrInMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IdInMapServices/GetIdArrInMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdInMapServicesServer).GetIdArrInMap(ctx, req.(*GetIdArrInMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdInMapServices_ServiceDesc is the grpc.ServiceDesc for IdInMapServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdInMapServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IdInMapServices",
	HandlerType: (*IdInMapServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdInMap",
			Handler:    _IdInMapServices_GetIdInMap_Handler,
		},
		{
			MethodName: "GetIdArrInMap",
			Handler:    _IdInMapServices_GetIdArrInMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dist/proto/ids.proto",
}
